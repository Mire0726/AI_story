import Head from "next/head";
import Image from "next/image";
import {
  Box,
  Button,
  Container,
  Heading,
  Textarea,
  Center,
  Spinner,
} from "@chakra-ui/react";
import { useCallback, useState, FormEvent } from "react";
import { GetRecipeRequestData, GetRecipeResponseData } from "@/types/recipe";

export default function Home() {
  const [foods, setFoods] = useState("");
  const [recipe, setRecipe] = useState(""); // 追加

  const [isSending, setIsSending] = useState(false);

  const onSubmit = useCallback(
    async (e: FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      setIsSending(true);

      const data: GetRecipeRequestData = { foods };
      const response = await fetch("/api/recipe", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }).catch((error) => {
        console.error(error);
        return null;
      });

      setIsSending(false);

      if (!response) {
        alert("エラーが発生しました。");
        return;
      }
      const responseData: GetRecipeResponseData = await response.json();

      // レシピのみを取り出す
      setRecipe(responseData.recipe.message.content);
    },
    [foods]
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Heading mt={8}>AIお話しメーカー</Heading>
        <Image
          src="/vercel.svg"
          alt="Vercel Logo"
          width={100}
          height={24}
          priority
        />
        <form onSubmit={onSubmit}>
          {" "}
          {/* 修正 */}
          <Box mt={8}>
            <Textarea
              name="foods"
              rows={8}
              value={foods}
              onChange={(e) => setFoods(e.target.value)}
              placeholder={`母
妹`}
              required
            />
          </Box>
          <Box mt={4}>
            {isSending ? (
              <Center>
                <Spinner />
              </Center>
            ) : (
              <Button type="submit" colorScheme="blue">
                AIにお話しを作ってもらう
              </Button>
            )}
          </Box>
          {recipe !== "" && (
            <Box mt={8} whiteSpace="pre-wrap" wordBreak="break-word">
              {recipe}
            </Box>
          )}
        </form>
      </Container>
    </>
  );
}
